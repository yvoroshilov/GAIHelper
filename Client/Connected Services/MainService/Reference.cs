//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.MainService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MainService.SubscribeState", Namespace="http://schemas.datacontract.org/2004/07/GaiWcfService.Service")]
    public enum MainServiceSubscribeState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUBSCRIBED = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUBSCRIBE_UPDATED = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOT_SUBSCRIBED = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDto", Namespace="http://schemas.datacontract.org/2004/07/GaiWcfService.Dto")]
    [System.SerializableAttribute()]
    public partial class UserDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string loginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string roleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string login {
            get {
                return this.loginField;
            }
            set {
                if ((object.ReferenceEquals(this.loginField, value) != true)) {
                    this.loginField = value;
                    this.RaisePropertyChanged("login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string role {
            get {
                return this.roleField;
            }
            set {
                if ((object.ReferenceEquals(this.roleField, value) != true)) {
                    this.roleField = value;
                    this.RaisePropertyChanged("role");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmployeeDto", Namespace="http://schemas.datacontract.org/2004/07/GaiWcfService.Dto")]
    [System.SerializableAttribute()]
    public partial class EmployeeDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int certificateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime hireDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string patronymicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string surnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userLoginField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int certificateId {
            get {
                return this.certificateIdField;
            }
            set {
                if ((this.certificateIdField.Equals(value) != true)) {
                    this.certificateIdField = value;
                    this.RaisePropertyChanged("certificateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime hireDate {
            get {
                return this.hireDateField;
            }
            set {
                if ((this.hireDateField.Equals(value) != true)) {
                    this.hireDateField = value;
                    this.RaisePropertyChanged("hireDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string patronymic {
            get {
                return this.patronymicField;
            }
            set {
                if ((object.ReferenceEquals(this.patronymicField, value) != true)) {
                    this.patronymicField = value;
                    this.RaisePropertyChanged("patronymic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string surname {
            get {
                return this.surnameField;
            }
            set {
                if ((object.ReferenceEquals(this.surnameField, value) != true)) {
                    this.surnameField = value;
                    this.RaisePropertyChanged("surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userLogin {
            get {
                return this.userLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.userLoginField, value) != true)) {
                    this.userLoginField = value;
                    this.RaisePropertyChanged("userLogin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShiftDto", Namespace="http://schemas.datacontract.org/2004/07/GaiWcfService.Dto")]
    [System.SerializableAttribute()]
    public partial class ShiftDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime endField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int responsibleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime startField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime end {
            get {
                return this.endField;
            }
            set {
                if ((this.endField.Equals(value) != true)) {
                    this.endField = value;
                    this.RaisePropertyChanged("end");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int responsibleId {
            get {
                return this.responsibleIdField;
            }
            set {
                if ((this.responsibleIdField.Equals(value) != true)) {
                    this.responsibleIdField = value;
                    this.RaisePropertyChanged("responsibleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime start {
            get {
                return this.startField;
            }
            set {
                if ((this.startField.Equals(value) != true)) {
                    this.startField = value;
                    this.RaisePropertyChanged("start");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationDto", Namespace="http://schemas.datacontract.org/2004/07/GaiWcfService.Dto")]
    [System.SerializableAttribute()]
    public partial class ViolationDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string carNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime dateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> latitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> longitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double penaltyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int personIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string protocolIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int shiftIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string violationTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string carNumber {
            get {
                return this.carNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.carNumberField, value) != true)) {
                    this.carNumberField = value;
                    this.RaisePropertyChanged("carNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                if ((this.dateField.Equals(value) != true)) {
                    this.dateField = value;
                    this.RaisePropertyChanged("date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> latitude {
            get {
                return this.latitudeField;
            }
            set {
                if ((this.latitudeField.Equals(value) != true)) {
                    this.latitudeField = value;
                    this.RaisePropertyChanged("latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> longitude {
            get {
                return this.longitudeField;
            }
            set {
                if ((this.longitudeField.Equals(value) != true)) {
                    this.longitudeField = value;
                    this.RaisePropertyChanged("longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double penalty {
            get {
                return this.penaltyField;
            }
            set {
                if ((this.penaltyField.Equals(value) != true)) {
                    this.penaltyField = value;
                    this.RaisePropertyChanged("penalty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int personId {
            get {
                return this.personIdField;
            }
            set {
                if ((this.personIdField.Equals(value) != true)) {
                    this.personIdField = value;
                    this.RaisePropertyChanged("personId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string protocolId {
            get {
                return this.protocolIdField;
            }
            set {
                if ((object.ReferenceEquals(this.protocolIdField, value) != true)) {
                    this.protocolIdField = value;
                    this.RaisePropertyChanged("protocolId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int shiftId {
            get {
                return this.shiftIdField;
            }
            set {
                if ((this.shiftIdField.Equals(value) != true)) {
                    this.shiftIdField = value;
                    this.RaisePropertyChanged("shiftId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string violationTypeId {
            get {
                return this.violationTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.violationTypeIdField, value) != true)) {
                    this.violationTypeIdField = value;
                    this.RaisePropertyChanged("violationTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViolationTypeDto", Namespace="http://schemas.datacontract.org/2004/07/GaiWcfService.Dto")]
    [System.SerializableAttribute()]
    public partial class ViolationTypeDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal maxPenaltyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal minPenaltyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int paydayAfterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string titleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal maxPenalty {
            get {
                return this.maxPenaltyField;
            }
            set {
                if ((this.maxPenaltyField.Equals(value) != true)) {
                    this.maxPenaltyField = value;
                    this.RaisePropertyChanged("maxPenalty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal minPenalty {
            get {
                return this.minPenaltyField;
            }
            set {
                if ((this.minPenaltyField.Equals(value) != true)) {
                    this.minPenaltyField = value;
                    this.RaisePropertyChanged("minPenalty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int paydayAfter {
            get {
                return this.paydayAfterField;
            }
            set {
                if ((this.paydayAfterField.Equals(value) != true)) {
                    this.paydayAfterField = value;
                    this.RaisePropertyChanged("paydayAfter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonDto", Namespace="http://schemas.datacontract.org/2004/07/GaiWcfService.Dto")]
    [System.SerializableAttribute()]
    public partial class PersonDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double actualPenaltyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime birthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string driverLicenseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double paidPenaltyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passportIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string patronymicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string surnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double actualPenalty {
            get {
                return this.actualPenaltyField;
            }
            set {
                if ((this.actualPenaltyField.Equals(value) != true)) {
                    this.actualPenaltyField = value;
                    this.RaisePropertyChanged("actualPenalty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime birthday {
            get {
                return this.birthdayField;
            }
            set {
                if ((this.birthdayField.Equals(value) != true)) {
                    this.birthdayField = value;
                    this.RaisePropertyChanged("birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string driverLicense {
            get {
                return this.driverLicenseField;
            }
            set {
                if ((object.ReferenceEquals(this.driverLicenseField, value) != true)) {
                    this.driverLicenseField = value;
                    this.RaisePropertyChanged("driverLicense");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double paidPenalty {
            get {
                return this.paidPenaltyField;
            }
            set {
                if ((this.paidPenaltyField.Equals(value) != true)) {
                    this.paidPenaltyField = value;
                    this.RaisePropertyChanged("paidPenalty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string passportId {
            get {
                return this.passportIdField;
            }
            set {
                if ((object.ReferenceEquals(this.passportIdField, value) != true)) {
                    this.passportIdField = value;
                    this.RaisePropertyChanged("passportId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string patronymic {
            get {
                return this.patronymicField;
            }
            set {
                if ((object.ReferenceEquals(this.patronymicField, value) != true)) {
                    this.patronymicField = value;
                    this.RaisePropertyChanged("patronymic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string surname {
            get {
                return this.surnameField;
            }
            set {
                if ((object.ReferenceEquals(this.surnameField, value) != true)) {
                    this.surnameField = value;
                    this.RaisePropertyChanged("surname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaymentDto", Namespace="http://schemas.datacontract.org/2004/07/GaiWcfService.Dto")]
    [System.SerializableAttribute()]
    public partial class PaymentDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double amountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime dateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int personIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double amount {
            get {
                return this.amountField;
            }
            set {
                if ((this.amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.RaisePropertyChanged("amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                if ((this.dateField.Equals(value) != true)) {
                    this.dateField = value;
                    this.RaisePropertyChanged("date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int personId {
            get {
                return this.personIdField;
            }
            set {
                if ((this.personIdField.Equals(value) != true)) {
                    this.personIdField = value;
                    this.RaisePropertyChanged("personId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoleDto", Namespace="http://schemas.datacontract.org/2004/07/GaiWcfService.Dto")]
    [System.SerializableAttribute()]
    public partial class RoleDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string roleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string role {
            get {
                return this.roleField;
            }
            set {
                if ((object.ReferenceEquals(this.roleField, value) != true)) {
                    this.roleField = value;
                    this.RaisePropertyChanged("role");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IAdminService", CallbackContract=typeof(Client.MainService.IAdminServiceCallback))]
    public interface IAdminService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/Subscribe", ReplyAction="http://tempuri.org/IAdminService/SubscribeResponse")]
        Client.MainService.MainServiceSubscribeState Subscribe(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/Subscribe", ReplyAction="http://tempuri.org/IAdminService/SubscribeResponse")]
        System.Threading.Tasks.Task<Client.MainService.MainServiceSubscribeState> SubscribeAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SetTest", ReplyAction="http://tempuri.org/IAdminService/SetTestResponse")]
        void SetTest(int lel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SetTest", ReplyAction="http://tempuri.org/IAdminService/SetTestResponse")]
        System.Threading.Tasks.Task SetTestAsync(int lel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetTest", ReplyAction="http://tempuri.org/IAdminService/GetTestResponse")]
        System.ServiceModel.Channels.Message GetTest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetTest", ReplyAction="http://tempuri.org/IAdminService/GetTestResponse")]
        System.Threading.Tasks.Task<System.ServiceModel.Channels.Message> GetTestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddUser", ReplyAction="http://tempuri.org/IAdminService/AddUserResponse")]
        void AddUser(Client.MainService.UserDto User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddUser", ReplyAction="http://tempuri.org/IAdminService/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(Client.MainService.UserDto User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetUser", ReplyAction="http://tempuri.org/IAdminService/GetUserResponse")]
        Client.MainService.UserDto GetUser(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetUser", ReplyAction="http://tempuri.org/IAdminService/GetUserResponse")]
        System.Threading.Tasks.Task<Client.MainService.UserDto> GetUserAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/EditUser", ReplyAction="http://tempuri.org/IAdminService/EditUserResponse")]
        void EditUser(Client.MainService.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/EditUser", ReplyAction="http://tempuri.org/IAdminService/EditUserResponse")]
        System.Threading.Tasks.Task EditUserAsync(Client.MainService.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/getAllUsers", ReplyAction="http://tempuri.org/IAdminService/getAllUsersResponse")]
        Client.MainService.UserDto[] getAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/getAllUsers", ReplyAction="http://tempuri.org/IAdminService/getAllUsersResponse")]
        System.Threading.Tasks.Task<Client.MainService.UserDto[]> getAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchUsers", ReplyAction="http://tempuri.org/IAdminService/SearchUsersResponse")]
        Client.MainService.UserDto[] SearchUsers(Client.MainService.UserDto searchedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchUsers", ReplyAction="http://tempuri.org/IAdminService/SearchUsersResponse")]
        System.Threading.Tasks.Task<Client.MainService.UserDto[]> SearchUsersAsync(Client.MainService.UserDto searchedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteUser", ReplyAction="http://tempuri.org/IAdminService/DeleteUserResponse")]
        void DeleteUser(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteUser", ReplyAction="http://tempuri.org/IAdminService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddEmployee", ReplyAction="http://tempuri.org/IAdminService/AddEmployeeResponse")]
        void AddEmployee(Client.MainService.EmployeeDto employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddEmployee", ReplyAction="http://tempuri.org/IAdminService/AddEmployeeResponse")]
        System.Threading.Tasks.Task AddEmployeeAsync(Client.MainService.EmployeeDto employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetEmployeeByUserLogin", ReplyAction="http://tempuri.org/IAdminService/GetEmployeeByUserLoginResponse")]
        Client.MainService.EmployeeDto GetEmployeeByUserLogin(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetEmployeeByUserLogin", ReplyAction="http://tempuri.org/IAdminService/GetEmployeeByUserLoginResponse")]
        System.Threading.Tasks.Task<Client.MainService.EmployeeDto> GetEmployeeByUserLoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/EditEmployee", ReplyAction="http://tempuri.org/IAdminService/EditEmployeeResponse")]
        void EditEmployee(Client.MainService.EmployeeDto employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/EditEmployee", ReplyAction="http://tempuri.org/IAdminService/EditEmployeeResponse")]
        System.Threading.Tasks.Task EditEmployeeAsync(Client.MainService.EmployeeDto employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchEmployees", ReplyAction="http://tempuri.org/IAdminService/SearchEmployeesResponse")]
        Client.MainService.EmployeeDto[] SearchEmployees(Client.MainService.EmployeeDto searchedEmployee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchEmployees", ReplyAction="http://tempuri.org/IAdminService/SearchEmployeesResponse")]
        System.Threading.Tasks.Task<Client.MainService.EmployeeDto[]> SearchEmployeesAsync(Client.MainService.EmployeeDto searchedEmployee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteEmployee", ReplyAction="http://tempuri.org/IAdminService/DeleteEmployeeResponse")]
        void DeleteEmployee(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteEmployee", ReplyAction="http://tempuri.org/IAdminService/DeleteEmployeeResponse")]
        System.Threading.Tasks.Task DeleteEmployeeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/OpenShift", ReplyAction="http://tempuri.org/IAdminService/OpenShiftResponse")]
        int OpenShift(int responsibleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/OpenShift", ReplyAction="http://tempuri.org/IAdminService/OpenShiftResponse")]
        System.Threading.Tasks.Task<int> OpenShiftAsync(int responsibleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/CloseShift", ReplyAction="http://tempuri.org/IAdminService/CloseShiftResponse")]
        void CloseShift(int responsibleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/CloseShift", ReplyAction="http://tempuri.org/IAdminService/CloseShiftResponse")]
        System.Threading.Tasks.Task CloseShiftAsync(int responsibleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetCurrentShift", ReplyAction="http://tempuri.org/IAdminService/GetCurrentShiftResponse")]
        Client.MainService.ShiftDto GetCurrentShift(int responsibleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetCurrentShift", ReplyAction="http://tempuri.org/IAdminService/GetCurrentShiftResponse")]
        System.Threading.Tasks.Task<Client.MainService.ShiftDto> GetCurrentShiftAsync(int responsibleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllShiftsByResponsibleId", ReplyAction="http://tempuri.org/IAdminService/GetAllShiftsByResponsibleIdResponse")]
        Client.MainService.ShiftDto[] GetAllShiftsByResponsibleId(int responsibleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllShiftsByResponsibleId", ReplyAction="http://tempuri.org/IAdminService/GetAllShiftsByResponsibleIdResponse")]
        System.Threading.Tasks.Task<Client.MainService.ShiftDto[]> GetAllShiftsByResponsibleIdAsync(int responsibleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetShiftById", ReplyAction="http://tempuri.org/IAdminService/GetShiftByIdResponse")]
        Client.MainService.ShiftDto GetShiftById(int shiftId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetShiftById", ReplyAction="http://tempuri.org/IAdminService/GetShiftByIdResponse")]
        System.Threading.Tasks.Task<Client.MainService.ShiftDto> GetShiftByIdAsync(int shiftId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchViolations", ReplyAction="http://tempuri.org/IAdminService/SearchViolationsResponse")]
        Client.MainService.ViolationDto[] SearchViolations(Client.MainService.ViolationDto violation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchViolations", ReplyAction="http://tempuri.org/IAdminService/SearchViolationsResponse")]
        System.Threading.Tasks.Task<Client.MainService.ViolationDto[]> SearchViolationsAsync(Client.MainService.ViolationDto violation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllViolationsByResponsibleId", ReplyAction="http://tempuri.org/IAdminService/GetAllViolationsByResponsibleIdResponse")]
        Client.MainService.ViolationDto[] GetAllViolationsByResponsibleId(int responsibleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllViolationsByResponsibleId", ReplyAction="http://tempuri.org/IAdminService/GetAllViolationsByResponsibleIdResponse")]
        System.Threading.Tasks.Task<Client.MainService.ViolationDto[]> GetAllViolationsByResponsibleIdAsync(int responsibleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchViolationsPenaltyRange", ReplyAction="http://tempuri.org/IAdminService/SearchViolationsPenaltyRangeResponse")]
        Client.MainService.ViolationDto[] SearchViolationsPenaltyRange(Client.MainService.ViolationDto searchedViolation, double penaltyMin, double penaltyMax);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchViolationsPenaltyRange", ReplyAction="http://tempuri.org/IAdminService/SearchViolationsPenaltyRangeResponse")]
        System.Threading.Tasks.Task<Client.MainService.ViolationDto[]> SearchViolationsPenaltyRangeAsync(Client.MainService.ViolationDto searchedViolation, double penaltyMin, double penaltyMax);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchViolationsDateRange", ReplyAction="http://tempuri.org/IAdminService/SearchViolationsDateRangeResponse")]
        Client.MainService.ViolationDto[] SearchViolationsDateRange(Client.MainService.ViolationDto searchedViolation, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchViolationsDateRange", ReplyAction="http://tempuri.org/IAdminService/SearchViolationsDateRangeResponse")]
        System.Threading.Tasks.Task<Client.MainService.ViolationDto[]> SearchViolationsDateRangeAsync(Client.MainService.ViolationDto searchedViolation, System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddViolationType", ReplyAction="http://tempuri.org/IAdminService/AddViolationTypeResponse")]
        void AddViolationType(Client.MainService.ViolationTypeDto violationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddViolationType", ReplyAction="http://tempuri.org/IAdminService/AddViolationTypeResponse")]
        System.Threading.Tasks.Task AddViolationTypeAsync(Client.MainService.ViolationTypeDto violationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/EditViolationType", ReplyAction="http://tempuri.org/IAdminService/EditViolationTypeResponse")]
        void EditViolationType(int id, Client.MainService.ViolationTypeDto violationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/EditViolationType", ReplyAction="http://tempuri.org/IAdminService/EditViolationTypeResponse")]
        System.Threading.Tasks.Task EditViolationTypeAsync(int id, Client.MainService.ViolationTypeDto violationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteViolationType", ReplyAction="http://tempuri.org/IAdminService/DeleteViolationTypeResponse")]
        void DeleteViolationType(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteViolationType", ReplyAction="http://tempuri.org/IAdminService/DeleteViolationTypeResponse")]
        System.Threading.Tasks.Task DeleteViolationTypeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddPerson", ReplyAction="http://tempuri.org/IAdminService/AddPersonResponse")]
        Client.MainService.PersonDto AddPerson(Client.MainService.PersonDto person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddPerson", ReplyAction="http://tempuri.org/IAdminService/AddPersonResponse")]
        System.Threading.Tasks.Task<Client.MainService.PersonDto> AddPersonAsync(Client.MainService.PersonDto person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/EditPerson", ReplyAction="http://tempuri.org/IAdminService/EditPersonResponse")]
        void EditPerson(Client.MainService.PersonDto person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/EditPerson", ReplyAction="http://tempuri.org/IAdminService/EditPersonResponse")]
        System.Threading.Tasks.Task EditPersonAsync(Client.MainService.PersonDto person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchPersons", ReplyAction="http://tempuri.org/IAdminService/SearchPersonsResponse")]
        Client.MainService.PersonDto[] SearchPersons(Client.MainService.PersonDto searchedPerson);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchPersons", ReplyAction="http://tempuri.org/IAdminService/SearchPersonsResponse")]
        System.Threading.Tasks.Task<Client.MainService.PersonDto[]> SearchPersonsAsync(Client.MainService.PersonDto searchedPerson);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchPersonsByPaidPenalty", ReplyAction="http://tempuri.org/IAdminService/SearchPersonsByPaidPenaltyResponse")]
        Client.MainService.PersonDto[] SearchPersonsByPaidPenalty(Client.MainService.PersonDto searchedPerson, double minPaidPenalty, double maxPaidPenalty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchPersonsByPaidPenalty", ReplyAction="http://tempuri.org/IAdminService/SearchPersonsByPaidPenaltyResponse")]
        System.Threading.Tasks.Task<Client.MainService.PersonDto[]> SearchPersonsByPaidPenaltyAsync(Client.MainService.PersonDto searchedPerson, double minPaidPenalty, double maxPaidPenalty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchPersonsByActualPenalty", ReplyAction="http://tempuri.org/IAdminService/SearchPersonsByActualPenaltyResponse")]
        Client.MainService.PersonDto[] SearchPersonsByActualPenalty(Client.MainService.PersonDto searchedPerson, double minActualPenalty, double maxActualPenalty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SearchPersonsByActualPenalty", ReplyAction="http://tempuri.org/IAdminService/SearchPersonsByActualPenaltyResponse")]
        System.Threading.Tasks.Task<Client.MainService.PersonDto[]> SearchPersonsByActualPenaltyAsync(Client.MainService.PersonDto searchedPerson, double minActualPenalty, double maxActualPenalty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeletePerson", ReplyAction="http://tempuri.org/IAdminService/DeletePersonResponse")]
        void DeletePerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeletePerson", ReplyAction="http://tempuri.org/IAdminService/DeletePersonResponse")]
        System.Threading.Tasks.Task DeletePersonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetPerson", ReplyAction="http://tempuri.org/IAdminService/GetPersonResponse")]
        Client.MainService.PersonDto GetPerson(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetPerson", ReplyAction="http://tempuri.org/IAdminService/GetPersonResponse")]
        System.Threading.Tasks.Task<Client.MainService.PersonDto> GetPersonAsync(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetPayments", ReplyAction="http://tempuri.org/IAdminService/GetPaymentsResponse")]
        Client.MainService.PaymentDto[] GetPayments(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetPayments", ReplyAction="http://tempuri.org/IAdminService/GetPaymentsResponse")]
        System.Threading.Tasks.Task<Client.MainService.PaymentDto[]> GetPaymentsAsync(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllRoles", ReplyAction="http://tempuri.org/IAdminService/GetAllRolesResponse")]
        Client.MainService.RoleDto[] GetAllRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllRoles", ReplyAction="http://tempuri.org/IAdminService/GetAllRolesResponse")]
        System.Threading.Tasks.Task<Client.MainService.RoleDto[]> GetAllRolesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/Test", ReplyAction="http://tempuri.org/IAdminService/TestResponse")]
        string Test(string str);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceChannel : Client.MainService.IAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminServiceClient : System.ServiceModel.DuplexClientBase<Client.MainService.IAdminService>, Client.MainService.IAdminService {
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Client.MainService.MainServiceSubscribeState Subscribe(string login) {
            return base.Channel.Subscribe(login);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.MainServiceSubscribeState> SubscribeAsync(string login) {
            return base.Channel.SubscribeAsync(login);
        }
        
        public void SetTest(int lel) {
            base.Channel.SetTest(lel);
        }
        
        public System.Threading.Tasks.Task SetTestAsync(int lel) {
            return base.Channel.SetTestAsync(lel);
        }
        
        public System.ServiceModel.Channels.Message GetTest() {
            return base.Channel.GetTest();
        }
        
        public System.Threading.Tasks.Task<System.ServiceModel.Channels.Message> GetTestAsync() {
            return base.Channel.GetTestAsync();
        }
        
        public void AddUser(Client.MainService.UserDto User) {
            base.Channel.AddUser(User);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(Client.MainService.UserDto User) {
            return base.Channel.AddUserAsync(User);
        }
        
        public Client.MainService.UserDto GetUser(string login) {
            return base.Channel.GetUser(login);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.UserDto> GetUserAsync(string login) {
            return base.Channel.GetUserAsync(login);
        }
        
        public void EditUser(Client.MainService.UserDto user) {
            base.Channel.EditUser(user);
        }
        
        public System.Threading.Tasks.Task EditUserAsync(Client.MainService.UserDto user) {
            return base.Channel.EditUserAsync(user);
        }
        
        public Client.MainService.UserDto[] getAllUsers() {
            return base.Channel.getAllUsers();
        }
        
        public System.Threading.Tasks.Task<Client.MainService.UserDto[]> getAllUsersAsync() {
            return base.Channel.getAllUsersAsync();
        }
        
        public Client.MainService.UserDto[] SearchUsers(Client.MainService.UserDto searchedUser) {
            return base.Channel.SearchUsers(searchedUser);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.UserDto[]> SearchUsersAsync(Client.MainService.UserDto searchedUser) {
            return base.Channel.SearchUsersAsync(searchedUser);
        }
        
        public void DeleteUser(string login) {
            base.Channel.DeleteUser(login);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(string login) {
            return base.Channel.DeleteUserAsync(login);
        }
        
        public void AddEmployee(Client.MainService.EmployeeDto employee) {
            base.Channel.AddEmployee(employee);
        }
        
        public System.Threading.Tasks.Task AddEmployeeAsync(Client.MainService.EmployeeDto employee) {
            return base.Channel.AddEmployeeAsync(employee);
        }
        
        public Client.MainService.EmployeeDto GetEmployeeByUserLogin(string login) {
            return base.Channel.GetEmployeeByUserLogin(login);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.EmployeeDto> GetEmployeeByUserLoginAsync(string login) {
            return base.Channel.GetEmployeeByUserLoginAsync(login);
        }
        
        public void EditEmployee(Client.MainService.EmployeeDto employee) {
            base.Channel.EditEmployee(employee);
        }
        
        public System.Threading.Tasks.Task EditEmployeeAsync(Client.MainService.EmployeeDto employee) {
            return base.Channel.EditEmployeeAsync(employee);
        }
        
        public Client.MainService.EmployeeDto[] SearchEmployees(Client.MainService.EmployeeDto searchedEmployee) {
            return base.Channel.SearchEmployees(searchedEmployee);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.EmployeeDto[]> SearchEmployeesAsync(Client.MainService.EmployeeDto searchedEmployee) {
            return base.Channel.SearchEmployeesAsync(searchedEmployee);
        }
        
        public void DeleteEmployee(int id) {
            base.Channel.DeleteEmployee(id);
        }
        
        public System.Threading.Tasks.Task DeleteEmployeeAsync(int id) {
            return base.Channel.DeleteEmployeeAsync(id);
        }
        
        public int OpenShift(int responsibleId) {
            return base.Channel.OpenShift(responsibleId);
        }
        
        public System.Threading.Tasks.Task<int> OpenShiftAsync(int responsibleId) {
            return base.Channel.OpenShiftAsync(responsibleId);
        }
        
        public void CloseShift(int responsibleId) {
            base.Channel.CloseShift(responsibleId);
        }
        
        public System.Threading.Tasks.Task CloseShiftAsync(int responsibleId) {
            return base.Channel.CloseShiftAsync(responsibleId);
        }
        
        public Client.MainService.ShiftDto GetCurrentShift(int responsibleId) {
            return base.Channel.GetCurrentShift(responsibleId);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.ShiftDto> GetCurrentShiftAsync(int responsibleId) {
            return base.Channel.GetCurrentShiftAsync(responsibleId);
        }
        
        public Client.MainService.ShiftDto[] GetAllShiftsByResponsibleId(int responsibleId) {
            return base.Channel.GetAllShiftsByResponsibleId(responsibleId);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.ShiftDto[]> GetAllShiftsByResponsibleIdAsync(int responsibleId) {
            return base.Channel.GetAllShiftsByResponsibleIdAsync(responsibleId);
        }
        
        public Client.MainService.ShiftDto GetShiftById(int shiftId) {
            return base.Channel.GetShiftById(shiftId);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.ShiftDto> GetShiftByIdAsync(int shiftId) {
            return base.Channel.GetShiftByIdAsync(shiftId);
        }
        
        public Client.MainService.ViolationDto[] SearchViolations(Client.MainService.ViolationDto violation) {
            return base.Channel.SearchViolations(violation);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.ViolationDto[]> SearchViolationsAsync(Client.MainService.ViolationDto violation) {
            return base.Channel.SearchViolationsAsync(violation);
        }
        
        public Client.MainService.ViolationDto[] GetAllViolationsByResponsibleId(int responsibleId) {
            return base.Channel.GetAllViolationsByResponsibleId(responsibleId);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.ViolationDto[]> GetAllViolationsByResponsibleIdAsync(int responsibleId) {
            return base.Channel.GetAllViolationsByResponsibleIdAsync(responsibleId);
        }
        
        public Client.MainService.ViolationDto[] SearchViolationsPenaltyRange(Client.MainService.ViolationDto searchedViolation, double penaltyMin, double penaltyMax) {
            return base.Channel.SearchViolationsPenaltyRange(searchedViolation, penaltyMin, penaltyMax);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.ViolationDto[]> SearchViolationsPenaltyRangeAsync(Client.MainService.ViolationDto searchedViolation, double penaltyMin, double penaltyMax) {
            return base.Channel.SearchViolationsPenaltyRangeAsync(searchedViolation, penaltyMin, penaltyMax);
        }
        
        public Client.MainService.ViolationDto[] SearchViolationsDateRange(Client.MainService.ViolationDto searchedViolation, System.DateTime start, System.DateTime end) {
            return base.Channel.SearchViolationsDateRange(searchedViolation, start, end);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.ViolationDto[]> SearchViolationsDateRangeAsync(Client.MainService.ViolationDto searchedViolation, System.DateTime start, System.DateTime end) {
            return base.Channel.SearchViolationsDateRangeAsync(searchedViolation, start, end);
        }
        
        public void AddViolationType(Client.MainService.ViolationTypeDto violationType) {
            base.Channel.AddViolationType(violationType);
        }
        
        public System.Threading.Tasks.Task AddViolationTypeAsync(Client.MainService.ViolationTypeDto violationType) {
            return base.Channel.AddViolationTypeAsync(violationType);
        }
        
        public void EditViolationType(int id, Client.MainService.ViolationTypeDto violationType) {
            base.Channel.EditViolationType(id, violationType);
        }
        
        public System.Threading.Tasks.Task EditViolationTypeAsync(int id, Client.MainService.ViolationTypeDto violationType) {
            return base.Channel.EditViolationTypeAsync(id, violationType);
        }
        
        public void DeleteViolationType(int id) {
            base.Channel.DeleteViolationType(id);
        }
        
        public System.Threading.Tasks.Task DeleteViolationTypeAsync(int id) {
            return base.Channel.DeleteViolationTypeAsync(id);
        }
        
        public Client.MainService.PersonDto AddPerson(Client.MainService.PersonDto person) {
            return base.Channel.AddPerson(person);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.PersonDto> AddPersonAsync(Client.MainService.PersonDto person) {
            return base.Channel.AddPersonAsync(person);
        }
        
        public void EditPerson(Client.MainService.PersonDto person) {
            base.Channel.EditPerson(person);
        }
        
        public System.Threading.Tasks.Task EditPersonAsync(Client.MainService.PersonDto person) {
            return base.Channel.EditPersonAsync(person);
        }
        
        public Client.MainService.PersonDto[] SearchPersons(Client.MainService.PersonDto searchedPerson) {
            return base.Channel.SearchPersons(searchedPerson);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.PersonDto[]> SearchPersonsAsync(Client.MainService.PersonDto searchedPerson) {
            return base.Channel.SearchPersonsAsync(searchedPerson);
        }
        
        public Client.MainService.PersonDto[] SearchPersonsByPaidPenalty(Client.MainService.PersonDto searchedPerson, double minPaidPenalty, double maxPaidPenalty) {
            return base.Channel.SearchPersonsByPaidPenalty(searchedPerson, minPaidPenalty, maxPaidPenalty);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.PersonDto[]> SearchPersonsByPaidPenaltyAsync(Client.MainService.PersonDto searchedPerson, double minPaidPenalty, double maxPaidPenalty) {
            return base.Channel.SearchPersonsByPaidPenaltyAsync(searchedPerson, minPaidPenalty, maxPaidPenalty);
        }
        
        public Client.MainService.PersonDto[] SearchPersonsByActualPenalty(Client.MainService.PersonDto searchedPerson, double minActualPenalty, double maxActualPenalty) {
            return base.Channel.SearchPersonsByActualPenalty(searchedPerson, minActualPenalty, maxActualPenalty);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.PersonDto[]> SearchPersonsByActualPenaltyAsync(Client.MainService.PersonDto searchedPerson, double minActualPenalty, double maxActualPenalty) {
            return base.Channel.SearchPersonsByActualPenaltyAsync(searchedPerson, minActualPenalty, maxActualPenalty);
        }
        
        public void DeletePerson(int id) {
            base.Channel.DeletePerson(id);
        }
        
        public System.Threading.Tasks.Task DeletePersonAsync(int id) {
            return base.Channel.DeletePersonAsync(id);
        }
        
        public Client.MainService.PersonDto GetPerson(int personId) {
            return base.Channel.GetPerson(personId);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.PersonDto> GetPersonAsync(int personId) {
            return base.Channel.GetPersonAsync(personId);
        }
        
        public Client.MainService.PaymentDto[] GetPayments(int personId) {
            return base.Channel.GetPayments(personId);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.PaymentDto[]> GetPaymentsAsync(int personId) {
            return base.Channel.GetPaymentsAsync(personId);
        }
        
        public Client.MainService.RoleDto[] GetAllRoles() {
            return base.Channel.GetAllRoles();
        }
        
        public System.Threading.Tasks.Task<Client.MainService.RoleDto[]> GetAllRolesAsync() {
            return base.Channel.GetAllRolesAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllViolations", ReplyAction="http://tempuri.org/IUserService/GetAllViolationsResponse")]
        Client.MainService.ViolationDto[] GetAllViolations(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllViolations", ReplyAction="http://tempuri.org/IUserService/GetAllViolationsResponse")]
        System.Threading.Tasks.Task<Client.MainService.ViolationDto[]> GetAllViolationsAsync(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddViolation", ReplyAction="http://tempuri.org/IUserService/AddViolationResponse")]
        Client.MainService.ViolationDto AddViolation(Client.MainService.ViolationDto violation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddViolation", ReplyAction="http://tempuri.org/IUserService/AddViolationResponse")]
        System.Threading.Tasks.Task<Client.MainService.ViolationDto> AddViolationAsync(Client.MainService.ViolationDto violation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/EditViolation", ReplyAction="http://tempuri.org/IUserService/EditViolationResponse")]
        void EditViolation(Client.MainService.ViolationDto violation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/EditViolation", ReplyAction="http://tempuri.org/IUserService/EditViolationResponse")]
        System.Threading.Tasks.Task EditViolationAsync(Client.MainService.ViolationDto violation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteViolation", ReplyAction="http://tempuri.org/IUserService/DeleteViolationResponse")]
        void DeleteViolation(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteViolation", ReplyAction="http://tempuri.org/IUserService/DeleteViolationResponse")]
        System.Threading.Tasks.Task DeleteViolationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllViolationTypes", ReplyAction="http://tempuri.org/IUserService/GetAllViolationTypesResponse")]
        Client.MainService.ViolationTypeDto[] GetAllViolationTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllViolationTypes", ReplyAction="http://tempuri.org/IUserService/GetAllViolationTypesResponse")]
        System.Threading.Tasks.Task<Client.MainService.ViolationTypeDto[]> GetAllViolationTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetPersonByDriverLicense", ReplyAction="http://tempuri.org/IUserService/GetPersonByDriverLicenseResponse")]
        Client.MainService.PersonDto GetPersonByDriverLicense(string driverLicense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetPersonByDriverLicense", ReplyAction="http://tempuri.org/IUserService/GetPersonByDriverLicenseResponse")]
        System.Threading.Tasks.Task<Client.MainService.PersonDto> GetPersonByDriverLicenseAsync(string driverLicense);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : Client.MainService.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<Client.MainService.IUserService>, Client.MainService.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.MainService.ViolationDto[] GetAllViolations(int personId) {
            return base.Channel.GetAllViolations(personId);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.ViolationDto[]> GetAllViolationsAsync(int personId) {
            return base.Channel.GetAllViolationsAsync(personId);
        }
        
        public Client.MainService.ViolationDto AddViolation(Client.MainService.ViolationDto violation) {
            return base.Channel.AddViolation(violation);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.ViolationDto> AddViolationAsync(Client.MainService.ViolationDto violation) {
            return base.Channel.AddViolationAsync(violation);
        }
        
        public void EditViolation(Client.MainService.ViolationDto violation) {
            base.Channel.EditViolation(violation);
        }
        
        public System.Threading.Tasks.Task EditViolationAsync(Client.MainService.ViolationDto violation) {
            return base.Channel.EditViolationAsync(violation);
        }
        
        public void DeleteViolation(int id) {
            base.Channel.DeleteViolation(id);
        }
        
        public System.Threading.Tasks.Task DeleteViolationAsync(int id) {
            return base.Channel.DeleteViolationAsync(id);
        }
        
        public Client.MainService.ViolationTypeDto[] GetAllViolationTypes() {
            return base.Channel.GetAllViolationTypes();
        }
        
        public System.Threading.Tasks.Task<Client.MainService.ViolationTypeDto[]> GetAllViolationTypesAsync() {
            return base.Channel.GetAllViolationTypesAsync();
        }
        
        public Client.MainService.PersonDto GetPersonByDriverLicense(string driverLicense) {
            return base.Channel.GetPersonByDriverLicense(driverLicense);
        }
        
        public System.Threading.Tasks.Task<Client.MainService.PersonDto> GetPersonByDriverLicenseAsync(string driverLicense) {
            return base.Channel.GetPersonByDriverLicenseAsync(driverLicense);
        }
    }
}
